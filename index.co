fs = require 'fs'

require 'js-yaml'

path_helper = require 'path'

# scan directory tree for CLI.yaml|CLI.json
# and require + return
get_cli_settings = (path)->
	dir = path
	if fs.existsSync path		
		stats = fs.statSync path
		if stats.isFile!
			dir := path_helper.dirname dir

	dir .= replace /\\/g, '/'

	_dir = dir.split '/'
	
	c = _dir.length


	for k from 0 to c - 1
		_path = _dir .join '/'
		_dir.pop!
		_path += '/CLI.'


		for ext of <[json yaml]>
			__path = _path+ext

			if fs.existsSync __path
				try
					cli = require __path
					break
				catch e
					console.error "Cannot load #{__path}: #e"


	return cli	


module.exports = (cli_options || {})->

	dir = require('path').dirname(module.parent.filename)

	# if not cli_options?

	_cli_options = get_cli_settings dir

	cli_options <<< _cli_options

	cli_options.@aliases
	cli_options.@@booleans
	cli_options.@defaults
	cli_options.@examples
	cli_options.@descriptions

	# add --version option
	# get version information from following sources:
	# cli_options, package.json
	cli_version = cli_options.version

	if not cli_options.no_default
		if fs.existsSync dir+"/package.json"
			try
				package_json = require dir+"/package.json"

				if not cli_version
					cli_version := package_json.name+" "+package_json.version

				cli_options.dependencies = package_json.@dependencies

			catch e
				console.log "No package.json found"
				cli_version = ''

	if cli_version !== null
		cli_options.@@booleans.push 'version'

	# add --examples, --defaults, --help, --options options
	if not cli_options.no_default
		# cli_options.@@booleans <<< ['examples', 'defaults', 'help', 'options']
		cli_options.booleans .= concat ['examples', 'defaults', 'help', 'options', 'dependencies']

		# cli_options
		cli_options.descriptions <<<
			examples: "Show code examples"
			defaults: "Show default command line values"
			help: "Show help"
			version: "Show version"

		cli_options.aliases.@@help
		cli_options.aliases.help .= concat ['usage', 'h']
		# cli_options.aliases.@@version
		# cli_options.aliases.version .= concat ['v']
		# console.log cli_options.aliases

	argv_parser = new (require './lib/argv_parser' .parser)(cli_options)
	argv_parser.parse()

	argv = argv_parser.argv

	# handle --version
	if argv.version and cli_version !== null
		console.log cli_version
		# return
		# process.exit(0)

	for k of <[help examples defaults options dependencies]>
		if argv[k]
			console.log cli_version+"\n"
			argv_parser.show[k]()
			break
			# process.exit(0)

	return argv_parser

