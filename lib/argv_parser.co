wordwrap         = require 'wordwrap'
# console_string   = require './console_string'
cli_options      = require './text_cli_options'

# 
# this function parses process.argv.slice 2
# 
# 1. Many boolean values within single element
# 
#    -abc...z becomes -a -b -c ... -z
#    
#    In this case a...z are treated as booleans
#    regardless of content @booleans
#    
class exports.parser
	name: 'name_undefined'

	booleans: {}
	defaults: {}
	aliases: {}
	descriptions: {}
	examples: []

	raw_argv: null

	argv: {}

	parsed: false

	show: {}

	(settings)->
		settings.@aliases
		settings.@@booleans
		settings.@defaults
		settings.@examples
		settings.@descriptions
		settings.@options
		settings.@display_settings
		settings.@@dependencies

		# user defined argv
		if settings.argv
			@set_argv settings.argv

		# convert settings.options into
		# separate settings properties
		if (Object.keys settings.options).length > 0
			for name in settings.options

				o = settings.options[name]
				for k in o

					value = o[k]
					switch k
						case 'boolean'
							if value === true
								settings.@@booleans.push name
						case 'alias'
							settings.@aliases@@[name]
							if value not instanceof Array then value := [value]
							settings.aliases[name] .= concat value
						case 'description'
							settings.@descriptions[name] = value
						case 'default'
							settings.@defaults[name] = value


		@set_aliases      settings.aliases
		@set_defaults     settings.defaults
		@set_descriptions settings.descriptions
		@set_examples     settings.examples
		@set_booleans     settings.booleans

		@display_settings = settings.display_settings

		# package.json dependencies
		@dependencies = settings.dependencies

		# convert string numbers to numbers
		@convert_number = settings.convert_number

		# if settings.filename then @filename = settings.filename
		@filename = settings.filename

		for k in settings
			if k.match /^show_/
				if settings[k] instanceof Function
					@[k] = settings[k]
				else if not settings[k]
					@[k] = ->

		# expose `show_...` in `show`
		for k from 0 to (a=<[defaults usage examples options help dependencies]>).length - 1
			x = a[k]
			let x
				@show[x] = ~> @["show_#x"] ...

	set_booleans: (booleans)->
		if booleans? and booleans not instanceof Array then booleans := [booleans]

		for k in booleans
			b = booleans[k]
			@booleans[b] = true

	set_defaults: (defaults)->
		@argv <<< defaults
		@defaults <<< defaults

	set_examples    : (@examples)->
	set_aliases     : (aliases)->
		for k in aliases
			if aliases[k] not instanceof Array
				aliases[k] = [aliases[k]]

		@aliases = aliases
	set_descriptions: (@descriptions)->

	string_override: (lstr,rstr)->

	with_dashes: (k)->
		if k.length > 1 then "--#k"
		else "-#k"

	show_usage: ->
		@show_help!

	show_help: ->
		@show_options!
		@show_defaults!
		@show_examples!

	show_dependencies: ->
		for k in @dependencies
			console.log "#k: "+@dependencies[k]

	show_options: ->
		# keys = Object.keys @defaults
		# keys_out = Object.keys @defaults
		keys = Object.keys @descriptions
		keys_out = Object.keys @descriptions

		options = {}
		for i from 0 to keys_out.length-1
			k = keys_out[i]
			keys_out[i] = @with_dashes k

			if a=@aliases[k]
				if a instanceof Array
					a .= map ~> @with_dashes it
					a = a*', '
				else
					a = @with_dashes a

				keys_out[i] = (@with_dashes k) + ", #a"
			else
				keys_out[i] = (@with_dashes k)

			options[keys_out[i]] = @descriptions[keys[i]]

		opt = {
				title: "Options:"
				options: options
				hmargin: 2
		} <<< @display_settings.@options

		cli_options opt,true


	show_defaults: ->
		defaults = {}

		for k in @defaults
			defaults[k] = @defaults[k] + " [" + typeof @defaults[k] + "]"

		opt = {
				title: "Defaults:"
				options: defaults
				# col1_width: 20
		} <<< @display_settings.@defaults

		cli_options opt,true

	show_examples: ->
		filename = @filename or module.parent.filename
		name = require 'path' .basename (filename)

		examples = {}
		if @examples instanceof Array
			for k in @examples
				examples[@examples[k]] = ''
		else
			for k in @examples
				examples[name + " " + k] = @examples[k]

		opt = {
				title: "Examples:"
				options: examples
				align_right: false
				# col1_width: 20
		} <<< @display_settings.@examples

		cli_options opt,true

	# display nice output
	show_nice_argv: ->
		if Object.keys @argv .length > 0
			console.log "argv: {"
			for k in @argv
				console.log "\t#k: #{@argv[k]}"

			console.log "}"
		else
			console.log "argv: {}"

		# console.log "argv.arr: ["+ @argv.arr*', ' +"]"


	set_argv: (argv)->
		@raw_argv = argv

	parse: ->
		if @raw_argv === null
			@set_argv (process.argv.slice 2)

		argv = [].concat @raw_argv

		@argv_no_alias = {}

		# if not argv.length then return false

		# separate booleans from within single element
		# i.e. ['-abc...z'] becomes ['-a', '-b', '-c', ..., '-z']
		# These values are automatically treated as booleans ONLY
		# if they were not defined as aliases of other NON-boolean
		# option
		for k in argv
			a = argv[k]
			if m=a.match /^-([A-z]+)/
				if (s = m[1].split '').length > 1
					argv = argv.slice(0,k).concat(argv.slice(k+1))

					@set_booleans s

					for k in s
						s[k] = "-#{s[k]}"

					argv = argv.concat s

		# convert aliases in argv to real names (still with dashes)
		for k in @aliases
			for l in @aliases[k]
				alias = @aliases[k][l]
				if (i=argv.indexOf (@with_dashes alias)) !== -1
					argv[i] = @with_dashes k

		# parse boolean arguments
		for b in @booleans
			# b = @booleans[k]
			# if b.length == 1 and (i=argv.indexOf "-#b") !== -1 or (i=argv.indexOf "--#b") !== -1
			dash_b = @with_dashes b
			if (i=argv.indexOf dash_b) !== -1
				argv = argv.slice(0,i).concat(argv.slice(i+1))
				@argv[b] = true
			# --not-...
			else if (i=argv.indexOf "--not-#b") !== -1 #or (i=argv.indexOf "-no-#b") !== -1
				argv = argv.slice(0,i).concat(argv.slice(i+1))
				@argv[b] = false
			else
				@argv[b] = null

			@argv_no_alias[b] = @argv[b]

		# parse non boolean arguments
		# i.e. try to match values to keys
		for k from 0 to argv.length - 1
			a = argv[k]

			if a? and m=a.match /^(--|-)/
				a -= //^#{m[1]}//
				if argv[k+1]? and not argv[k+1].match /^(--|-)/
					@argv[a] = argv[k+1]
					argv[k] = null
					argv[k+1] = null
					k++
				else
					@argv[a] = null
					argv[k] = null

				@argv_no_alias[a] = @argv[a]

		# argv_no_alias <<< @argv

		# clone information across aliases
		for k in @aliases
			for l in @aliases[k]
				alias = @aliases[k][l]
				@argv[alias] = @argv[k]


		# remove undefined and null values from argv
		_argv = [].concat argv
		argv = []
		for k from 0 to _argv.length - 1
			if typeof _argv[k] !== 'undefined' and _argv[k] !== null
				argv.push _argv[k]


		@argv._ = argv

		@argv_not_null = {}
		for k of @argv
			if @argv[k] !== null
				@argv_not_null[k] = @argv[k]

		# @argv_no_alias = argv_no_alias
		@argv_no_alias._ = argv

		@argv
		# ret = @argv
		# ret <<< {_: argv}
		# ret
